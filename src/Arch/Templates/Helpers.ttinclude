<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#+

    public int Amount = 25;


    public string Indent(StringBuilder sb, int spaces)
    {
        var indent = new string(' ', spaces);
        return sb.ToString().Replace("\n", "\n" + indent);
    }

    string AppendGenerics(int amount)
    {
        var sb = new StringBuilder();
        for (var i = 0; i < amount; i++)
        {
            if (i > 0) sb.Append(", ");
            sb.Append($"T{i}");
        }
        return sb.ToString();
    }

    /// <summary>
    ///     Lists ref params in a row as parameters.
    ///     <example>
    ///         <code>
    ///             ref T0 t0Component, ref T1 t1Component,...
    ///         </code>
    ///     </example>
    /// </summary>
    /// <param name="sb"></param>
    /// <param name="amount"></param>
    /// <returns></returns>
    public StringBuilder AppendGenericRefParameters(int amount)
    {
        var sb = new StringBuilder();
        for (var localIndex = 0; localIndex < amount; localIndex++)
        {
            sb.Append($"ref T{localIndex} t{localIndex}Component,");
        }

        sb.Length--;
        return sb;
    }

    /// <summary>
    ///     Lists in params in a row as parameters.
    ///     <example>
    ///         <code>
    ///             in T0 t0Component, in T1 t1Component,...
    ///         </code>
    ///     </example>
    /// </summary>
    /// <param name="sb"></param>
    /// <param name="amount"></param>
    /// <returns></returns>
    public StringBuilder AppendGenericInDefaultParams(int amount, string name = "Component")
    {
        var sb = new StringBuilder();
        for (var localIndex = 0; localIndex < amount; localIndex++)
        {
            sb.Append($"in T{localIndex}? t{localIndex}{name} = default,");
        }

        sb.Length--;
        return sb;
    }

    /// <summary>
    ///     Inserts ref params in a row as parameters.
    ///     <example>
    ///         <code>
    ///             in t0Component, in t1Component,...
    ///         </code>
    ///     </example>
    /// </summary>
    /// <param name="sb"></param>
    /// <param name="amount"></param>
    /// <returns></returns>
    public StringBuilder InsertGenericInParams(int amount)
    {
        var sb = new StringBuilder();
        for (var localIndex = 0; localIndex < amount; localIndex++)
        {
            sb.Append($"in t{localIndex}Component,");
        }

        sb.Length--;
        return sb;
    }

    /// <summary>
    ///     Inserts ref params in a row as parameters.
    ///     <example>
    ///         <code>
    ///             ref t0Component, ref t1Component,...
    ///         </code>
    ///     </example>
    /// </summary>
    /// <param name="sb"></param>
    /// <param name="amount"></param>
    /// <returns></returns>
    public StringBuilder InsertGenericRefParams(int amount)
    {
        var sb = new StringBuilder();
        for (var localIndex = 0; localIndex < amount; localIndex++)
        {
            sb.Append($"ref t{localIndex}Component,");
        }

        sb.Length--;
        return sb;
    }

    /// TODO : Probably use chunk.GetFirst<...>(); overloads instead?
    /// <summary>
    ///     Gets all generic first elements from an source and assigns them to a local variable.
    ///     <example>
    ///         <code>
    ///             ref var t0FirstElement = ref source.GetFirst&lt;T0&gt;();
    ///             ref var t1FirstElement = ref source.GetFirst&lt;T1&gt;();
    ///             ...
    ///         </code>
    ///     </example>
    /// </summary>
    /// <param name="amount"></param>
    /// <returns></returns>
    public static StringBuilder AppendGetFirstComponentFrom(int amount, string placeholder = "chunk.")
    {
        var sb = new StringBuilder();
        for (var localIndex = 0; localIndex < amount; localIndex++)
        {
            sb.AppendLine($"ref var t{localIndex}FirstElement = ref {placeholder}GetFirst<T{localIndex}>();");
        }
        return sb;
    }

    /// <summary>
    ///     Gets generics components from the first element and lists them under each other.
    ///     <example>
    ///         <code>
    ///             ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
    ///             ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
    ///             ...
    ///         </code>
    ///     </example>
    /// </summary>
    /// <param name="sb"></param>
    /// <param name="amount"></param>
    /// <returns></returns>
    public static StringBuilder AppendGetComponentsFromFirst(int amount)
    {
        var sb = new StringBuilder();
        for (var localIndex = 0; localIndex < amount; localIndex++)
        {
            sb.AppendLine($"ref var t{localIndex}Component = ref Unsafe.Add(ref t{localIndex}FirstElement, entityIndex);");
        }

        return sb;
    }
#>
